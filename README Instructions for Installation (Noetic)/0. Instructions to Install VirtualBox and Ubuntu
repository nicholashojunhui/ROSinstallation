Getting started with Ubuntu 20.04 in VirtualBox (Only for those without dual boot!)
*Note that for this course, we will be using ROS Noetic. Hence, please take note that it is strictly required to install Ubuntu version 20.04, as this version 
can better support ROS Noetic.

####################################################################################################################################################
####################################################################################################################################################

VirtualBox installation
  1.	First we need to download VirtualBox (latest version; to be safe) from  https://www.virtualbox.org/wiki 
  2.	Run the executable and follow the prompts to complete the installation.

####################################################################################################################################################
####################################################################################################################################################

Create an Ubuntu virtual machine
  1.	Download the latest Ubuntu release from http://releases.ubuntu.com/20.04/?_ga=2.245247622.286617492.1585822024-1634746839.1585822024. 
Download Ubuntu version 20.04.5 LTS (Focal Fossa); click on 64-bit PC (AMD64) desktop image to download desktop image
  2.	Open VirtualBox and click New
  3.	Type the Name for the virtual machine, like Ubuntu 20.04. VirtualBox will try to predict the Type and Version based on the name you enter. 
      Otherwise, select:
      •	Type: Linux
      •	Version: Ubuntu (64-bit)
      and click Next.
  4.	Next we need to specify how much memory to allocate the virtual machine. According to the Ubuntu system requirements we need 2GB, 
      but I’d recommend more if your host can handle it. Basically the higher you can set the memory without severely impacting your host machine, 
      the better the performance of the guest machine. If you’re not sure, stick with 2048MB (i.e. 2 GB)
  5.	On the Hardware screen select Create a virtual hard disk now and click Create
  6.	Accept the default option VDI for Hard disk file type and click Next
  7.	Next we are prompted for Storage on physical hard disk. The options are Dynamically allocated and Fixed size. 
      We’ll use the default of Dynamically allocated. Click Next
  8.	Choose the hard disk size and storage location. The Ubuntu system requirements recommend 25GB; change to 25GB. 
      Remember, we choose Dynamically allocated as our storage option in the last step, so we won’t consume all this disk space immediately. 
      Rather, VirtualBox will allocate it as required, up to the maximum 25GB we specified. Click Create
  9.	The wizard will finish and we are returned to the main VirtualBox window. Click Settings
  10.	In the left pane select Storage, then in the right select the CD icon with the word Empty beside it
  11.	Under Attributes click the CD icon and select Choose a disk file and browse to the downloaded file ubuntu-16.04.6-desktop-amd64.iso
  12.	Click OK to close the Settings dialog window. The virtual machine should now be ready to start

####################################################################################################################################################
####################################################################################################################################################

Install Ubuntu
In VirtualBox your VM should be showing as Powered Off, and the optical drive configured to point to the Ubuntu ISO file we downloaded previously.
  1.	In VirtualBox, click Start. VirtualBox will launch a new window with the vm and boot from the iso
  2.	Click Start and you will be taken to an installation window
  3.	Click Install Ubuntu
  4.	Select Download updates while installing Ubuntu and click Continue
  5.	On the next screen accept the default of Erase disk and install Ubuntu and click Install Now
  6.	You will be prompted with a warning saying the changes will be written to disk. Click Continue
  7.	Select your timezone and click Continue
  8.	Select your keyboard layout. I accepted the default of English (US) and click Continue
  9.	Enter a username and password, then click Continue
  10.	The Ubuntu installation may take several minutes to run
  11.	When the installation is finished you will be prompted to restart. Save and close anything else you may have open and click Restart Now
  12.	When the vm reboots, press Enter in the vm to proceed
  13.	If all went well the VM should boot to the Ubuntu login screen. Enter your password to continue
  14.	Ubuntu should run normally in the VirtualBox environment. If everything is far too small, you can adjust the screen by selecting View > Scaled Mode
  
####################################################################################################################################################
####################################################################################################################################################

To install wireless drivers (broadcom; dell PCs):
1. sudo apt-get update
2. sudo apt install firmware-b43-installer
3. sudo apt install broadcom-sta-dkms bcmwl-kernel-source

####################################################################################################################################################
####################################################################################################################################################

Configure the WiFi Network Setting for SD card for TB3

1(A). If plugged in the Dell PC, run the following commands in terminal: 
$ cd /media/$USER/writable/etc/netplan
$ sudo nano 50-cloud-init.yaml

1(B). If access directly, run the following commands in terminal:
$ cd /etc/netplan
$ sudo nano 50-cloud-init.yaml

2. Change 'WIFI_SSID' and 'WIFI_PASSWORD' to the correct ones

####################################################################################################################################################
####################################################################################################################################################

OpenCR Setup

1. Access TB3 PC via ssh:
$ ssh ubuntu@192.168.XX.XX

2. Install the required packages on the Raspberry Pi to upload the OpenCR firmware
$ sudo dpkg --add-architecture armhf
$ sudo apt-get update
$ sudo apt-get install libc6:armhf

3. Use waffle for the OPENCR_MODEL name. 
$ export OPENCR_PORT=/dev/ttyACM0
$ export OPENCR_MODEL=waffle_noetic
$ rm -rf ./opencr_update.tar.bz2

4. Download the firmware and loader, then extract the file.
$ wget https://github.com/ROBOTIS-GIT/OpenCR-Binaries/raw/master/turtlebot3/ROS1/latest/opencr_update.tar.bz2 
$ tar -xvf opencr_update.tar.bz2 

5. Upload firmware to the OpenCR. 
$ cd ./opencr_update
$ ./update.sh $OPENCR_PORT $OPENCR_MODEL.opencr

####################################################################################################################################################
####################################################################################################################################################

Pi Camera Set up; on TB3 PC, run the commands:
$ cd ~/catkin_ws/src
$ git clone https://github.com/UbiquityRobotics/raspicam_node.git
$ sudo apt install libraspberrypi-dev libraspberrypi0 libpigpiod-if-dev
$ sudo apt-get install ros-noetic-compressed-image-transport ros-noetic-camera-info-manager ros-noetic-diagnostic-updater
$ cd ~/catkin_ws && catkin_make

If encountered error due to diagnostics, try:
$ sudo apt-get install ros-noetic-diagnostics

OR If encountered error due to mmal libraries, try:
$ sudo apt install libraspberrypi-bin libraspberrypi-dev 

OR If encountered error due to * failed to open vchiq instance
$ sudo chmod 777 /dev/vchiq

then:
$ cd ~/catkin_ws && catkin_make

#######################################
###Do the following to enable camera###
#######################################
Picamera can be installed directly via pip:
$ sudo pip3 install picamera

To configure the Raspberry Pi to enable the camera module, open up the board configuration file with a text editor:
$ sudo nano /boot/firmware/config.txt
$ sudo nano /boot/config.txt

Add the following line to enable the camera:
start_x=1

Test if camera is working:
$ raspistill -v -o test.jpg

If still error, run on TB3 PC and try again:
$ sudo apt-get update
$ sudo apt-get upgrade

####################################################################################################################################################
####################################################################################################################################################
